#!/usr/bin/env python
#
# Copyright (c) 2019 Nikos Nikoleris
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met: redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer;
# redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution;
# neither the name of the copyright holders nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors: Nikos Nikoleris

import re
import sys
from pwn import *

DEBUG = False

def log(s):
    if DEBUG:
        print s

def find_coin(r, start, end, tries):
    for _ in range(0, tries + 1):
        log('Searching in [%d, %d)' % (start, end))
        count = end - start
        if count == 1:
            r.sendline(str(start))
            # This will either return sucess of the weigh of the coin
            # if there are more attempts left
            t = r.recvline(keepends=False)
        else:
            mid = start + count / 2
            resp = ' '.join(str(x) for x in range(start, mid))
            log('Trying first half [%d, %d)' % (start, mid))
            r.sendline(resp)

            t = r.recvline()
            weight = int(t)
            log('Resulting weight %d' % weight)
            if weight / 10 * 10 == weight:
                start = mid
            else:
                end = mid
    log('found coin: %d' % start)
    m = re.search('Correct! \((\d+)\)', t)
    win = int(m.group(1))
    return win

r = remote('pwnable.kr', 9007)
while True:
    t = r.recvline_regex('^N=[0-9]+ C=[0-9]+')
    m = re.search('N=(\d+) C=(\d+)', t)
    n = int(m.group(1))
    c = int(m.group(2))
    start = 0
    end = n
    win_count = find_coin(r, start, end, c)
    if win_count == 99:
        t = r.recvline(keepends=False)
        print t
        t = r.recvline(keepends=False)
        print t
        r.close()
        sys.exit(0)
